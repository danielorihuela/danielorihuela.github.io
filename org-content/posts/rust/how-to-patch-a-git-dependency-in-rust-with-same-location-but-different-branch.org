#+title: How to patch a git dependency in rust with same location but different branch
#+hugo_publishdate: 2023-05-29
#+options: tags:nil

At my current employer, we are developing multiple internal libraries in Rust. They are hosted in a git based code hosting. [[https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories][Here]] is how we can specify them from a different repository.

Sometimes we want to modify a repository (we will call it "Start") that happens to be one of the lowest dependencies in the tree. And we want to test that a specific repository (we will call it "End") that uses the "Start" dependency indirectly still works. For instance, we could have the following chain of dependencies: "End" -> "A" -> "B" -> "C" -> "Start", where "->" represents a dependency.

Rust allows to [[https://github.com/rust-lang/cargo/issues/5478][override dependencies]], but it does not work in all situations. For instance, it [[https://github.com/rust-lang/cargo/issues/5478][does not allow patching a git repository using a different branch of the same repository]]. The [[https://github.com/rust-lang/cargo/issues/5478#issuecomment-1506056467][fix]] is simple but easy to misconfigure. I have problems configuring it every time I need to do it.

#+begin_src toml
  [patch.'https://github.com/company/Start']
  start = { git = "https://www.github.com/company//Start.git", branch = "new-feature" }
#+end_src

There are two important details there.

- The patch url does not include the trailing ".git"
- The url in the second line contains "//" before "Start.git"

Without these two things, you will end with the following error:

#+begin_example
Caused by:
  patch for `start` in `https://github.com/company/Start` points to the same source, but patches must point
  to different sources
#+end_example
