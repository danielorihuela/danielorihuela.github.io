#+title: H4ck1ng G00gl3 ep003 challenge 02
#+description: todo
#+publishdate: 2022-11-13
#+options: ^:nil


* Introduction

[[https://h4ck1ng.google/][H4ck1ng G00gl3]] is a series of security challenges published on *October 2022* where the only way to win is to think like a hacker. In this post, I explain how I solved *ep003 challenge 02*. Category *Escape Restricted Shell*.

* Learning Journey

[[../../images/h4ck1ng00gl3ep003ch02/intro.png]]

The description gives us the command to connect to a remote machine.

[[../../images/h4ck1ng00gl3ep003ch02/greeting.png]]

[[../../images/h4ck1ng00gl3ep003ch02/game.png]]

At this point, we can try winning the game or cheating, as the hint suggests. At first, I tried to play the game for a while, searching for clues on how to cheat it. I could not find a way. I was recovering a lot of coordinates and images that didn't make sense and didn't help me. Later I learned that they are related to the bonus challenge for this episode. After dying a couple of times, the game became tedious, and I didn't find a way to cheat. I asked the community for help. The hint is related to the [[https://www.digitaltrends.com/gaming/famous-cheat-codes-in-video-games/#:~:text=In%20its%20most%20famous%20form,a%20cakewalk%20with%20the%20code][famous Konami cheat code]]. After introducing it, we get to another screen where we can input text.

[[../../images/h4ck1ng00gl3ep003ch02/cd-home.png]]

Notice that it won't execute any command. We need to do some research. First, I *copied the error output of the command "cd ~"* into the Google search engine.

[[../../images/h4ck1ng00gl3ep003ch02/shell-may-be-python.png]]

We can try to execute a python function to check if it's a python shell and its version. In that case, I decided to call:

#+begin_src python
print "asd"
#+end_src

[[../../images/h4ck1ng00gl3ep003ch02/shell-is-python3.png]]

By the given output, we can see that the *shell is running python version 3*. Lucky me, I found a [[https://book.hacktricks.xyz/generic-methodologies-and-resources/python/bypass-python-sandboxes#python3][webpage with tricks to scape from restricted python3 shells]]. That page shows how to access the *builtins* module, for example.

[[../../images/h4ck1ng00gl3ep003ch02/print-len-self.png]]

The [[https://docs.python.org/3/library/builtins.html][builtins]] module gives access to several functions, one of them being the *open* function. That means that we can open a file and read it. We know from past challenges that the flag file is at the root directory, and therefore, we can get the flag with

#+begin_src python
print(len.__self__.open('flag').read())
#+end_src

With that, we completed the challenge.

[[../../images/h4ck1ng00gl3ep003ch02/intro.png]]
