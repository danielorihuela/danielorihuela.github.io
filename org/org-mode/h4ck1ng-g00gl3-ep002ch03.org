#+title: H4ck1ng G00gl3 ep002 challenge 03
#+description: Escape a restricted shell in H4ck1ng G00gl3 ep002 challenge 03. Override builtin functions and use Bash tricks to find and reveal the flag.
#+publishdate: 2022-11-05
#+cover: ../../images/covers/hacking-google-2022.png
#+options: ^:nil


* Introduction

[[https://h4ck1ng.google/][H4ck1ng G00gl3]] is a series of security challenges published on *October 2022* where the only way to win is to think like a hacker. In this post, I explain how I solved *ep002 challenge 03*.
This challenge is about *Escaping Restricted Shell*.

* Learning Journey

[[../../images/h4ck1ng00gl3ep002ch03/intro.png]]

The description tells us how to connect to a remote shell.

[[../../images/h4ck1ng00gl3ep002ch03/quarantineshell.png]]

Once connected, we get access to a shell. It has a peculiarity, though. We cannot execute any commands because they are blocked. However, it tells us to check the completions to see the available ones. Therefore, I pressed the *tab* key a few times to see them.

[[../../images/h4ck1ng00gl3ep002ch03/available-commands.png]]

The flag, as in other challenges, can be found in the root folder. We can check it by writing "ls /" and then pressing the *tab* a couple of times to see the available files and directories.

[[../../images/h4ck1ng00gl3ep002ch03/ls-flag.png]]

I was stuck. I did not know what to do. I had to ask the community for a hint. The trick is overriding a builtin function. The [[https://www.gnu.org/savannah-checkouts/gnu/bash/manual/bash.html][bash documentation]] says:

#+begin_quote
Bash allows a function to override a builtin with the same name, and provides access to that builtinâ€™s functionality within the function via the builtin and command builtins (see Bash Builtin Commands). 
#+end_quote

That means we can *overwrite one of the builtin functions* available to try and read the flag. I tried with a couple of functions but did not manage to override them. I asked for another hint. We have to use the "*echo*" function. Executing the following commands will change its behaviour and return the flag.

#+begin_src bash
echo () { /bin/cat /flag; }
echo
#+end_src

With that, we completed the challenge.

[[../../images/h4ck1ng00gl3ep002ch03/intro.png]]
