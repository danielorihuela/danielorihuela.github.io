<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>danielorihuela</title><link>https://danielorihuela.github.io/</link><description>Recent content on danielorihuela</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 19 Nov 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://danielorihuela.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Heap-based buffer overflows</title><link>https://danielorihuela.github.io/posts/heap-based-buffer-overflows/</link><pubDate>Sun, 19 Nov 2023 00:00:00 +0000</pubDate><guid>https://danielorihuela.github.io/posts/heap-based-buffer-overflows/</guid><description>Table of Contents Introduction Stack vs Heap-based buffer overflows? System information Exercise Bonus points Conclusion Introduction In a previous post, I explained what a stack-based buffer overflow is and how it works. Today, we are going to see the heap-based variant.
Stack vs Heap-based buffer overflows? The difference between those two types is the region of memory where the exploited variables reside. That&amp;rsquo;s easy to see in the C language.</description></item><item><title>Optimize emacs start up time</title><link>https://danielorihuela.github.io/posts/optimize-emacs-start-up-time/</link><pubDate>Sat, 18 Nov 2023 00:00:00 +0000</pubDate><guid>https://danielorihuela.github.io/posts/optimize-emacs-start-up-time/</guid><description>Table of Contents Introduction Optimization steps Base configuration Don&amp;rsquo;t manipulate UI in init.el Garbage collector Disable UI Autoload packages Tangle org file Conclusion Introduction Emacs is a great tool. However, its loading time can grow huge. In this post, I&amp;rsquo;ll show you some configurations that helped me reduce the start up time from ~2.45s to ~0.81s.
Optimization steps To make it more interesting, I&amp;rsquo;m going to add a section for each optimization along with the time it saved me.</description></item><item><title>Store shellcode in environment variable</title><link>https://danielorihuela.github.io/posts/store-shellcode-in-environment-variable/</link><pubDate>Sun, 29 Oct 2023 00:00:00 +0000</pubDate><guid>https://danielorihuela.github.io/posts/store-shellcode-in-environment-variable/</guid><description>In the previous post we explained how stack-based buffer overflows work. In the last exercise, we inserted the shellcode in the stack. However, this might be a problem. What happens if the shellcode doesn&amp;rsquo;t fit in the stack? We can store it in an environment variable.
Manually store shellcode in env var We will export the shellcode manually and use it in our exploit.
Let&amp;rsquo;s keep working with the notesearch program (the last exercise of the previous post).</description></item><item><title>Stack-based buffer overflows</title><link>https://danielorihuela.github.io/posts/stack-based-buffer-overflows/</link><pubDate>Fri, 20 Oct 2023 00:00:00 +0000</pubDate><guid>https://danielorihuela.github.io/posts/stack-based-buffer-overflows/</guid><description>What&amp;rsquo;s a buffer overflow? Buffer overflows are a type of vulnerability where the attacker gives more data to a buffer than it can handle. As a result, the program overwrites adjacent memory locations with the exceeding data. Usually, the program will crash. However, a skilled hacker can take control of the program as it crashes and achieve incredible things, like access to a shell. Nowadays, there are some countermeasures in place.</description></item><item><title>How to use WASM code from ClojureScript through JavaScript interop</title><link>https://danielorihuela.github.io/posts/how-to-use-wasm-code-from-clojurescript-through-javascript-interop/</link><pubDate>Sat, 10 Jun 2023 00:00:00 +0000</pubDate><guid>https://danielorihuela.github.io/posts/how-to-use-wasm-code-from-clojurescript-through-javascript-interop/</guid><description>Clojure is a great programming language. I have been working with it lately, and it&amp;rsquo;s been a blast. Another language that I love is Rust. One day I was thinking about both languages, their advantages and disadvantages, and under which circumstances I should use each. That made me wonder if it would be hard to use WASM from Clojurescript.
My idea was to:
Create a simple function in Rust Use wasm-bindgen crate to generate the WASM code and JavaScript bindings.</description></item><item><title>How to patch a git dependency in rust with same location but different branch</title><link>https://danielorihuela.github.io/posts/how-to-patch-a-git-dependency-in-rust-with-same-location-but-different-branch/</link><pubDate>Mon, 29 May 2023 00:00:00 +0000</pubDate><guid>https://danielorihuela.github.io/posts/how-to-patch-a-git-dependency-in-rust-with-same-location-but-different-branch/</guid><description>At my current employer, we are developing multiple internal libraries in Rust. They are hosted in a git based code hosting. Here is how we can specify them from a different repository.
Sometimes we want to modify a repository (we will call it &amp;ldquo;Start&amp;rdquo;) that happens to be one of the lowest dependencies in the tree. And we want to test that a specific repository (we will call it &amp;ldquo;End&amp;rdquo;) that uses the &amp;ldquo;Start&amp;rdquo; dependency indirectly still works.</description></item><item><title>Why the Clojure REPL is so cool</title><link>https://danielorihuela.github.io/posts/why-the-clojure-repl-is-so-cool/</link><pubDate>Sun, 28 May 2023 00:00:00 +0000</pubDate><guid>https://danielorihuela.github.io/posts/why-the-clojure-repl-is-so-cool/</guid><description>A couple of weeks ago, I started a side project. The idea is to create a simple book reading tracker website, and I decided to go with Clojure. Why? You may wonder. Well. I wanted to play with and experience a couple of things: building an application using a functional programming approach and working with a LISP REPL.
At first, I had a hard time developing some frontend with ClojureScript. I was using a new language with new tools and frameworks and not taking full advantage of one of Clojure&amp;rsquo;s superpowers, the REPL.</description></item><item><title>H4ck1ng G00gl3 ep005 challenge 02</title><link>https://danielorihuela.github.io/posts/h4ck1ng-g00gl3-ep005ch02/</link><pubDate>Fri, 02 Dec 2022 00:00:00 +0000</pubDate><guid>https://danielorihuela.github.io/posts/h4ck1ng-g00gl3-ep005ch02/</guid><description>Table of Contents Introduction Learning Journey Introduction H4ck1ng G00gl3 is a series of security challenges published on October 2022 where the only way to win is to think like a hacker. In this post, I explain how I solved ep005 challenge 02. Category Cryptography.
Learning Journey This challenge includes a website and its source code. My first thought is that we will have to find and exploit a vulnerability in the code.</description></item><item><title>H4ck1ng G00gl3 ep005 challenge 03</title><link>https://danielorihuela.github.io/posts/h4ck1ng-g00gl3-ep005ch03/</link><pubDate>Fri, 02 Dec 2022 00:00:00 +0000</pubDate><guid>https://danielorihuela.github.io/posts/h4ck1ng-g00gl3-ep005ch03/</guid><description>Table of Contents Introduction Learning Journey Introduction H4ck1ng G00gl3 is a series of security challenges published on October 2022 where the only way to win is to think like a hacker. In this post, I explain how I solved ep005 challenge 03. Category Misc.
Learning Journey For this challenge, we don&amp;rsquo;t have any data. We have to find the secret message hidden in the episodes. I opened all the episodes in different browser tabs and looked at each introduction.</description></item><item><title>H4ck1ng G00gl3 ep005 challenge 01</title><link>https://danielorihuela.github.io/posts/h4ck1ng-g00gl3-ep005ch01/</link><pubDate>Mon, 28 Nov 2022 00:00:00 +0000</pubDate><guid>https://danielorihuela.github.io/posts/h4ck1ng-g00gl3-ep005ch01/</guid><description>Table of Contents Introduction Learning Journey Introduction H4ck1ng G00gl3 is a series of security challenges published on October 2022 where the only way to win is to think like a hacker. In this post, I explain how I solved ep005 challenge 01. Category Misc.
Learning Journey This challenge gives us a zip containing a binary file. After reading the hint, I tried to convert the file into different image formats, but it didn&amp;rsquo;t work.</description></item><item><title>H4ck1ng G00gl3 ep004 challenge 03</title><link>https://danielorihuela.github.io/posts/h4ck1ng-g00gl3-ep004ch03/</link><pubDate>Mon, 21 Nov 2022 00:00:00 +0000</pubDate><guid>https://danielorihuela.github.io/posts/h4ck1ng-g00gl3-ep004ch03/</guid><description>Table of Contents Introduction Learning Journey Introduction H4ck1ng G00gl3 is a series of security challenges published on October 2022 where the only way to win is to think like a hacker. In this post, I explain how I solved ep004 challenge 03. Category Misc.
Learning Journey In that challenge, we only have the hint. So, I went ahead to the webpage used in this episode. Next to the &amp;ldquo;FAQs&amp;rdquo; tab, I found the &amp;ldquo;Contributing&amp;rdquo; tab.</description></item><item><title>H4ck1ng G00gl3 ep004 challenge 01</title><link>https://danielorihuela.github.io/posts/h4ck1ng-g00gl3-ep004ch01/</link><pubDate>Sun, 20 Nov 2022 00:00:00 +0000</pubDate><guid>https://danielorihuela.github.io/posts/h4ck1ng-g00gl3-ep004ch01/</guid><description>Table of Contents Introduction Learning Journey Introduction H4ck1ng G00gl3 is a series of security challenges published on October 2022 where the only way to win is to think like a hacker. In this post, I explain how I solved ep004 challenge 01. Category Web Exploitation.
Learning Journey When we open the challenge, it redirects us to a copy of Google Bug Hunter webpage of the original Google Bug Hunter webpage.</description></item><item><title>H4ck1ng G00gl3 ep004 challenge 02</title><link>https://danielorihuela.github.io/posts/h4ck1ng-g00gl3-ep004ch02/</link><pubDate>Sun, 20 Nov 2022 00:00:00 +0000</pubDate><guid>https://danielorihuela.github.io/posts/h4ck1ng-g00gl3-ep004ch02/</guid><description>Table of Contents Introduction Learning Journey Introduction H4ck1ng G00gl3 is a series of security challenges published on October 2022 where the only way to win is to think like a hacker. In this post, I explain how I solved ep004 challenge 02. Category Web Exploitation.
Learning Journey In this challenge, we are given some code. We have to find the vulnerability and login as &amp;ldquo;tin&amp;rdquo;. Let&amp;rsquo;s check the code.</description></item><item><title>H4ck1ng G00gl3 ep003 challenge 02</title><link>https://danielorihuela.github.io/posts/h4ck1ng-g00gl3-ep003ch02/</link><pubDate>Sun, 13 Nov 2022 00:00:00 +0000</pubDate><guid>https://danielorihuela.github.io/posts/h4ck1ng-g00gl3-ep003ch02/</guid><description>Table of Contents Introduction Learning Journey Introduction H4ck1ng G00gl3 is a series of security challenges published on October 2022 where the only way to win is to think like a hacker. In this post, I explain how I solved ep003 challenge 02. Category Escape Restricted Shell.
Learning Journey The description gives us the command to connect to a remote machine.
At this point, we can try winning the game or cheating, as the hint suggests.</description></item><item><title>H4ck1ng G00gl3 ep003 challenge 03</title><link>https://danielorihuela.github.io/posts/h4ck1ng-g00gl3-ep003ch03/</link><pubDate>Sun, 13 Nov 2022 00:00:00 +0000</pubDate><guid>https://danielorihuela.github.io/posts/h4ck1ng-g00gl3-ep003ch03/</guid><description>Table of Contents Introduction Learning Journey Introduction H4ck1ng G00gl3 is a series of security challenges published on October 2022 where the only way to win is to think like a hacker. In this post, I explain how I solved ep003 challenge 03. Category Android.
Learning Journey Opening the challenge gives us a zip containing two files: an apk and a QR code. First things first, let&amp;rsquo;s install the application and see if we can scan the QR code and what&amp;rsquo;s the result.</description></item><item><title>H4ck1ng G00gl3 ep003 challenge 01</title><link>https://danielorihuela.github.io/posts/h4ck1ng-g00gl3-ep003ch01/</link><pubDate>Wed, 09 Nov 2022 00:00:00 +0000</pubDate><guid>https://danielorihuela.github.io/posts/h4ck1ng-g00gl3-ep003ch01/</guid><description>Table of Contents Introduction Learning Journey Introduction H4ck1ng G00gl3 is a series of security challenges published on October 2022 where the only way to win is to think like a hacker. In this post, I explain how I solved ep003 challenge 01. Category Misc.
Learning Journey The description tell us how to connect to the machine with socat. However, it requires a password. I tried to guess it with no luck.</description></item><item><title>H4ck1ng G00gl3 ep002 challenge 03</title><link>https://danielorihuela.github.io/posts/h4ck1ng-g00gl3-ep002ch03/</link><pubDate>Sat, 05 Nov 2022 00:00:00 +0000</pubDate><guid>https://danielorihuela.github.io/posts/h4ck1ng-g00gl3-ep002ch03/</guid><description>Table of Contents Introduction Learning Journey Introduction H4ck1ng G00gl3 is a series of security challenges published on October 2022 where the only way to win is to think like a hacker. In this post, I explain how I solved ep002 challenge 03. This challenge is about Escaping Restricted Shell.
Learning Journey The description tells us how to connect to a remote shell.
Once connected, we get access to a shell.</description></item><item><title>H4ck1ng G00gl3 ep002 challenge 02</title><link>https://danielorihuela.github.io/posts/h4ck1ng-g00gl3-ep002ch02/</link><pubDate>Fri, 04 Nov 2022 00:00:00 +0000</pubDate><guid>https://danielorihuela.github.io/posts/h4ck1ng-g00gl3-ep002ch02/</guid><description>Table of Contents Introduction Learning Journey Introduction H4ck1ng G00gl3 is a series of security challenges published on October 2022 where the only way to win is to think like a hacker. In this post, I explain how I solved ep002 challenge 02. This challenge is about Forensics.
Learning Journey The challenge gives us a zip containing a readme file and the logs in a csv file. The readme explains how to install timesketch using docker.</description></item><item><title>H4ck1ng G00gl3 ep002 challenge 01</title><link>https://danielorihuela.github.io/posts/h4ck1ng-g00gl3-ep002ch01/</link><pubDate>Thu, 03 Nov 2022 00:00:00 +0000</pubDate><guid>https://danielorihuela.github.io/posts/h4ck1ng-g00gl3-ep002ch01/</guid><description>Table of Contents Introduction Learning Journey Introduction H4ck1ng G00gl3 is a series of security challenges published on October 2022 where the only way to win is to think like a hacker. In this post, I explain how I solved ep002 challenge 01. This challenge is about Steganography.
Learning Journey The challenge gives us the following image.
It&amp;rsquo;s an RGBA file.
The first thing that came to mind with my basic knowledge of image steganography was the LSB (i.</description></item><item><title>H4ck1ng G00gl3 ep001 challenge 03</title><link>https://danielorihuela.github.io/posts/h4ck1ng-g00gl3-ep001ch03/</link><pubDate>Fri, 28 Oct 2022 00:00:00 +0000</pubDate><guid>https://danielorihuela.github.io/posts/h4ck1ng-g00gl3-ep001ch03/</guid><description>Table of Contents Introduction Learning Journey Introduction H4ck1ng G00gl3 is a series of security challenges published on October 2022 where the only way to win is to think like a hacker. In this post, I explain how I solved ep001 challenge 03. This challenge is about Reverse Engineering.
Learning Journey After opening the challenge, we see a chess website similar to the one in the ep000 ch01.</description></item><item><title>H4ck1ng G00gl3 ep001 challenge 02</title><link>https://danielorihuela.github.io/posts/h4ck1ng-g00gl3-ep001ch02/</link><pubDate>Thu, 20 Oct 2022 00:00:00 +0000</pubDate><guid>https://danielorihuela.github.io/posts/h4ck1ng-g00gl3-ep001ch02/</guid><description>Table of Contents Introduction Learning Journey Introduction H4ck1ng G00gl3 is a series of security challenges published on October 2022 where the only way to win is to think like a hacker. In this post, I explain how I solved ep001 challenge 02. This challenge is about Reverse Engineering.
Learning Journey After opening the challenge, we get a zip file containing an executable with the name wannacry.
As a first step, I extracted the strings from the executable with strings wannacry.</description></item><item><title>H4ck1ng G00gl3 ep000 challenge 01</title><link>https://danielorihuela.github.io/posts/h4ck1ng-g00gl3-ep000ch01/</link><pubDate>Tue, 18 Oct 2022 00:00:00 +0000</pubDate><guid>https://danielorihuela.github.io/posts/h4ck1ng-g00gl3-ep000ch01/</guid><description>Table of Contents Introduction Learning Journey Introduction H4ck1ng G00gl3 is a series of security challenges published on October 2022 where the only way to win is to think like a hacker. In this post I explain how I solved ep000 challenge 01. This challenge is about Web Exploitation.
Learning Journey After opening the challenge, we see the following screen.
Winning the game at this point is not the intended way to solve the challenge.</description></item><item><title>H4ck1ng G00gl3 ep000 challenge 02</title><link>https://danielorihuela.github.io/posts/h4ck1ng-g00gl3-ep000ch02/</link><pubDate>Tue, 18 Oct 2022 00:00:00 +0000</pubDate><guid>https://danielorihuela.github.io/posts/h4ck1ng-g00gl3-ep000ch02/</guid><description>Table of Contents Introduction Learning Journey Introduction H4ck1ng G00gl3 is a series of security challenges published on October 2022 where the only way to win is to think like a hacker. In this post, I explain how I solved ep000 challenge 02. This challenge is about Web Exploitation.
Learning Journey After opening the challenge, we see the log search tool.
The Log Search Tool is simple. It has two options.</description></item><item><title>H4ck1ng G00gl3 ep001 challenge 01</title><link>https://danielorihuela.github.io/posts/h4ck1ng-g00gl3-ep001ch01/</link><pubDate>Tue, 18 Oct 2022 00:00:00 +0000</pubDate><guid>https://danielorihuela.github.io/posts/h4ck1ng-g00gl3-ep001ch01/</guid><description>Table of Contents Introduction Learning Journey Introduction H4ck1ng G00gl3 is a series of security challenges published on October 2022 where the only way to win is to think like a hacker. In this post, I explain how I solved ep001 challenge 01. This challenge is about Reverse Engineering.
Learning Journey After opening the challenge, we get a zip file. This zip file contains another compressed file that includes two files.</description></item><item><title>Deploy blog written with org-mode on GitHub Pages</title><link>https://danielorihuela.github.io/posts/deploy-blog-written-with-org-mode-on-github-pages/</link><pubDate>Sun, 03 Jul 2022 00:00:00 +0000</pubDate><guid>https://danielorihuela.github.io/posts/deploy-blog-written-with-org-mode-on-github-pages/</guid><description>Table of Contents Context Goal (expected final workflow) Steps Create GitHub repository Upload Hugo configuration Create GitHub Action workflow Conclusion Context I have been using emacs to write in org-mode for some time now. I love it. So, I decided to start writing a personal blog with it. However, I did not have the tool to create the blog and the means to publish it. I selected a static site generator (SSG) called Hugo for my first problem.</description></item><item><title>Test github action build hugo webpage</title><link>https://danielorihuela.github.io/posts/test_action_post/</link><pubDate>Sat, 25 Jun 2022 00:00:00 +0000</pubDate><guid>https://danielorihuela.github.io/posts/test_action_post/</guid><description>Test github action build hugo webpage</description></item><item><title>About</title><link>https://danielorihuela.github.io/about/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://danielorihuela.github.io/about/</guid><description>Hi! I&amp;rsquo;m Daniel Orihuela, a Software Engineer interested in Cybersecurity, Cryptography, Algorithms, Distributed Systems and AI.
I have three years of professional experience in the fintech and evoting space. Currently focused on building cryptographic libraries. Nonetheless, I am always striving to improve my knowledge around making secure and privacy friendly products with great user experiences.
On my free time I enjoy improving my craftmanship, learning martial arts, reading books and playing video games.</description></item><item><title>Open Source Contributions</title><link>https://danielorihuela.github.io/open-source/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://danielorihuela.github.io/open-source/</guid><description> Gitleaks #661 Lynis #1009 OpenMined PySyft #5554 sycret #17 #18 #25 #36 SyMPC #114 #128 #130 #132 #162 #170 #174 #195 #216 #253 #281</description></item></channel></rss>